name: Deploy Angular App to AWS

on:
  push:
    branches: [main]  # Change to your default branch if different
  workflow_dispatch:  # Allows manual triggering

env:
  NODE_VERSION: '18'  # Adjust based on your Angular version requirements
  AWS_REGION: 'us-east-1'
  # Terraform variables
  TF_VAR_bucket_name: 'my-angular-app-dev-v2'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build Angular app
      run: |
        # Try different build commands
        if npm run build 2>/dev/null; then
          echo "‚úÖ Built with npm run build"
        elif npx ng build 2>/dev/null; then
          echo "‚úÖ Built with ng build"  
        elif npm run build:prod 2>/dev/null; then
          echo "‚úÖ Built with npm run build:prod"
        else
          echo "‚ùå No valid build command found"
          echo "Available scripts:"
          cat package.json | grep -A 10 '"scripts"'
          exit 1
        fi
      
    - name: Check build output
      run: |
        echo "Checking if dist folder exists..."
        ls -la
        if [ -d "dist" ]; then
          echo "‚úÖ dist folder found"
          ls -la dist/
        else
          echo "‚ùå dist folder not found - checking for other build outputs"
          find . -name "*.html" -o -name "*.js" -o -name "*.css" | head -10
        fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.3
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform init
      working-directory: .aws/terraform

    - name: Terraform Plan
      run: terraform plan
      working-directory: .aws/terraform

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: .aws/terraform

    - name: Get Terraform outputs
      id: terraform
      run: |
        echo "bucket_name=$(terraform output -raw bucket_name)" >> $GITHUB_OUTPUT
        echo "cloudfront_distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
      working-directory: .aws/terraform

    - name: Sync files to S3
      run: |
        # Find the correct dist folder
        if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
          if [ -d "dist/$(ls dist | head -n1)" ]; then
            BUILD_DIR="dist/$(ls dist | head -n1)"
          else
            BUILD_DIR="dist"
          fi
        else
          echo "‚ùå No build output found"
          exit 1
        fi
        
        echo "üìÅ Using build directory: $BUILD_DIR"
        ls -la "$BUILD_DIR"
        
        # Sync static assets with long cache
        aws s3 sync "$BUILD_DIR/" s3://${{ steps.terraform.outputs.bucket_name }} \
          --delete \
          --cache-control "public,max-age=31536000,immutable" \
          --exclude "*.html" \
          --exclude "*.json"
        
        # Sync HTML and JSON files with no cache
        aws s3 sync "$BUILD_DIR/" s3://${{ steps.terraform.outputs.bucket_name }} \
          --cache-control "public,max-age=0,must-revalidate" \
          --include "*.html" \
          --include "*.json"
          
        echo "üì¶ Files uploaded to S3"
        aws s3 ls s3://${{ steps.terraform.outputs.bucket_name }}

    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ steps.terraform.outputs.cloudfront_distribution_id }} \
          --paths "/*"

    - name: Deployment complete
      run: |
        echo "üöÄ Deployment successful!"
        echo "Your app should be available at: https://$(terraform output -raw cloudfront_domain)"